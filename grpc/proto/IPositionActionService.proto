syntax = "proto3";
package Service.InvestEngine.Positions.Grpc;
import "bcl.proto";

message CancelPendingPositionRequest {
   string PositionId = 1;
   string OfficerId = 2;
   string InvestWalletId = 3;
   string ClientId = 4;
}
message ChangePositionPendingPriceRequest {
   string ClientId = 1;
   string WalletId = 2;
   string PositionId = 3;
   .bcl.Decimal PendingPrice = 4;
   string OfficerId = 5;
}
message CloseActivePositionRequest {
   string PositionId = 1;
   string OfficerId = 2;
   string InvestWalletId = 3;
   string ClientId = 4;
   .bcl.Decimal ClientClosePrice = 5;
}
message CloseActivePositionsRequest {
   string ClientOrWalletId = 1;
   string Symbol = 2;
   string AssetId = 3;
   .bcl.DateTime StartDate = 4;
   .bcl.DateTime EndDate = 5;
   string Officer = 6;
}
enum CloseReason {
   Undefined = 0;
   StopLoss = 1;
   TakeProfit = 2;
   MarketClose = 3;
   Liquidation = 4;
}
message CreateMarketOpenPositionRequest {
   string ClientId = 1;
   string WalletId = 2;
   string InvestWalletId = 3;
   string Symbol = 4;
   .bcl.Decimal Amount = 5;
   string AmountAssetId = 6;
   int32 Multiplicator = 7;
   Direction Direction = 8;
   TPSLType TakeProfitType = 9;
   .bcl.Decimal TakeProfitValue = 10;
   TPSLType StopLossType = 11;
   .bcl.Decimal StopLossValue = 12;
   string OfficerId = 13;
   .bcl.Decimal ClientOpenPrice = 14;
}
message CreatePendingPositionRequest {
   string ClientId = 1;
   string WalletId = 2;
   string InvestWalletId = 3;
   string Symbol = 4;
   .bcl.Decimal Amount = 5;
   string AmountAssetId = 6;
   int32 Multiplicator = 7;
   Direction Direction = 8;
   .bcl.Decimal TargetPrice = 9;
   TPSLType TakeProfitType = 10;
   .bcl.Decimal TakeProfitValue = 11;
   TPSLType StopLossType = 12;
   .bcl.Decimal StopLossValue = 13;
   string OfficerId = 14;
   .bcl.Decimal ClientPendingPrice = 15;
}
enum Direction {
   Undefined = 0;
   Buy = 1;
   Sell = 2;
}
message InvestPosition {
   string Id = 1;
   string ClientId = 2;
   string WalletId = 3;
   string InvestWalletId = 4;
   string Symbol = 5;
   .bcl.Decimal Amount = 6;
   string AmountAssetId = 7;
   int32 Multiplicator = 8;
   Direction Direction = 9;
   PositionType PositionType = 10;
   PositionStatus Status = 11;
   .bcl.DateTime CreationTimestamp = 12;
   .bcl.Decimal PendingPrice = 13;
   .bcl.Decimal OpenPrice = 14;
   .bcl.Decimal OpenTriggerPrice = 15;
   .bcl.DateTime OpenTimestamp = 16;
   .bcl.Decimal ClosePrice = 17;
   .bcl.Decimal CloseTriggerPrice = 18;
   .bcl.DateTime CloseTimestamp = 19;
   CloseReason CloseReason = 20;
   TPSLType TakeProfitType = 23;
   .bcl.Decimal TakeProfitAmount = 24;
   .bcl.Decimal TakeProfitPrice = 25;
   TPSLType StopLossType = 26;
   .bcl.Decimal StopLossAmount = 27;
   .bcl.Decimal StopLossPrice = 28;
   .bcl.Decimal Volume = 29;
   .bcl.Decimal VolumeBase = 30;
   .bcl.Decimal OpenFee = 31;
   .bcl.Decimal CloseFee = 32;
   .bcl.Decimal StopOutPrice = 33;
   .bcl.Decimal RollOver = 34;
   .bcl.Decimal ProfitLoss = 35;
   .bcl.Decimal MarketProfitLoss = 36;
   .bcl.Decimal Yield = 37;
   TradeExecutionType ExecutionType = 38;
   .bcl.DateTime NextRollOverTime = 39;
   .bcl.Decimal ClientPendingPrice = 40;
   .bcl.Decimal ClientOpenPrice = 41;
   .bcl.Decimal ClientClosePrice = 42;
   .bcl.DateTime LastModified = 100;
}
enum PositionStatus {
   Undefined = 0;
   Draft = 1;
   Pending = 2;
   Opening = 3;
   Opened = 4;
   Closing = 5;
   Closed = 6;
   Cancelling = 7;
   Cancelled = 8;
   DraftCancelled = 9;
}
enum PositionType {
   Undefined = 0;
   Market = 1;
   Limit = 2;
   Stop = 3;
}
message RecalculatePositionRollOverRequest {
   string PositionId = 1;
}
message Response_InvestPosition {
   InvestPosition Result = 1;
   ResultCodes ResultCode = 2;
   string ResultMessage = 3;
}
enum ResultCodes {
   ZERO = 0; // proto3 requires a zero value as the first item (it can be named anything)
   Ok = 1;
   NotFound = 2;
   Error = 3;
   LowBalance = 4;
   WrongStatus = 5;
   CannotReplaceOrders = 6;
   Duplicate = 7;
   OrderInProcessExternal = 8;
   ServiceInactive = 100;
}
message SetTakeProfitStopLossOrdersRequest {
   string PositionId = 1;
   TPSLType TakeProfitType = 2;
   .bcl.Decimal TakeProfitValue = 3;
   TPSLType StopLossType = 4;
   .bcl.Decimal StopLossValue = 5;
   string OfficerId = 6;
   string InvestWalletId = 7;
   string ClientId = 8;
}
enum TPSLType {
   Undefined = 0;
   Price = 1;
   Amount = 2;
}
enum TradeExecutionType {
   Internal = 0;
   External = 2;
}
service PositionActionService {
   rpc CancelPendingPosition (CancelPendingPositionRequest) returns (Response_InvestPosition);
   rpc ChangePositionPendingPrice (ChangePositionPendingPriceRequest) returns (Response_InvestPosition);
   rpc CloseActivePosition (CloseActivePositionRequest) returns (Response_InvestPosition);
   rpc CloseActivePositions (CloseActivePositionsRequest) returns (Response_InvestPosition);
   rpc CreateMarketOpenPosition (CreateMarketOpenPositionRequest) returns (Response_InvestPosition);
   rpc CreatePendingLimitPosition (CreatePendingPositionRequest) returns (Response_InvestPosition);
   rpc CreatePendingStopPosition (CreatePendingPositionRequest) returns (Response_InvestPosition);
   rpc RecalculatePositionRollOver (RecalculatePositionRollOverRequest) returns (Response_InvestPosition);
   rpc SetTakeProfitStopLossOrders (SetTakeProfitStopLossOrdersRequest) returns (Response_InvestPosition);
}
